// generated by Fast Light User Interface Designer (fluid) version 1.0303
#include "MyValueSlider.h"
#include "../mad_parser.h"

MyValueSlider::MyValueSlider(int x,int y,int w,int h,const char*l):Fl_Slider(x,y,w,h,l) {
  Fl_Group *save = Fl_Group::current();   // save current widget..
  Fl_Group::current(save);                // ..then back to previous.
}

int MyValueSlider::handle(int e) {
	switch(e) {
		case FL_PUSH:
			((data_buffer*) this->playbackData)->slider_in_use=true;
			break;
		case FL_HIDE:       // valuator goes away
			((data_buffer*) this->playbackData)->slider_in_use=false;
			((data_buffer*) this->playbackData)->processingWindow->hide();
			break;
		case FL_RELEASE:    // release mouse
			((data_buffer*) this->playbackData)->slider_in_use=false;
			break;
		case FL_LEAVE:      // leave focus
			((data_buffer*) this->playbackData)->slider_in_use=false;
			break;
		case FL_DRAG:
			((data_buffer*) this->playbackData)->slider_in_use=true;
			break;
		}
		return(Fl_Slider::handle(e));
}

void MyValueSlider::setMad(void* playbackData) {
  this->playbackData=playbackData;
}

Fl_Time_Output::Fl_Time_Output(int X, int Y, int W, int H, const char *L ) : Fl_Value_Output(X, Y, W, H, L) {
}

int Fl_Time_Output::format(char *buffer) {
  double v = value();                // value() is assumed to be in milliseconds
  			int h = v / 3600;            // hours
  			v -= (h*3600);
  			int m = v / 60;                      // minutes
  			v -= (m*60);
  			int s = v;                       // seconds
  			//int ms = 1000*(v-(s));            // milliseconds
  			// ARB: 128 since that is what is hardcoded in Fl_Valuator/Fl_Value_ etc
  			if(h>0)
  				return snprintf(buffer, 128, "%02d:%02d:%02d", h, m, s);
  			else
  				return snprintf(buffer, 128, "%02d:%02d", m, s);
}


