// generated by Fast Light User Interface Designer (fluid) version 1.0303

#ifndef TestPlayer_h
#define TestPlayer_h
#include <FL/Fl.H>
#include <FL/Fl_Chart.H>
#include "PlayerGUI_prot.h"
#include <sndfile.h>
#include "MyValueSlider.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Scrollbar.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Choice.H>

class TestPlayerGui {
public:
  TestPlayerGui();
  Fl_Double_Window *MainWindow;
  static Fl_Menu_Item menu_Menu[];
private:
  inline void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  inline void cb_Exit_i(Fl_Menu_*, void*);
  static void cb_Exit(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *Settings;
  static Fl_Menu_Item *about;
private:
  inline void cb_about_i(Fl_Menu_*, void*);
  static void cb_about(Fl_Menu_*, void*);
public:
  Fl_Output *fileName;
private:
  inline void cb_fileName_i(Fl_Output*, void*);
  static void cb_fileName(Fl_Output*, void*);
public:
  Fl_Time_Output *currentPos;
private:
  inline void cb_currentPos_i(Fl_Time_Output*, void*);
  static void cb_currentPos(Fl_Time_Output*, void*);
public:
  Fl_Time_Output *duration;
  Fl_Time_Output *remaining;
  MyValueSlider *slider;
private:
  inline void cb_slider_i(MyValueSlider*, void*);
  static void cb_slider(MyValueSlider*, void*);
public:
  Fl_Button *rewBut;
private:
  inline void cb_rewBut_i(Fl_Button*, void*);
  static void cb_rewBut(Fl_Button*, void*);
public:
  Fl_Button *startBut;
private:
  inline void cb_startBut_i(Fl_Button*, void*);
  static void cb_startBut(Fl_Button*, void*);
public:
  Fl_Button *stopBut;
private:
  inline void cb_stopBut_i(Fl_Button*, void*);
  static void cb_stopBut(Fl_Button*, void*);
public:
  Fl_Button *ffBut;
private:
  inline void cb_ffBut_i(Fl_Button*, void*);
  static void cb_ffBut(Fl_Button*, void*);
public:
  Fl_Slider *volumeSlider;
private:
  inline void cb_volumeSlider_i(Fl_Slider*, void*);
  static void cb_volumeSlider(Fl_Slider*, void*);
public:
  Fl_Button *procToggle;
private:
  inline void cb_procToggle_i(Fl_Button*, void*);
  static void cb_procToggle(Fl_Button*, void*);
public:
  Fl_Button *filtOpen;
private:
  inline void cb_filtOpen_i(Fl_Button*, void*);
  static void cb_filtOpen(Fl_Button*, void*);
public:
  Fl_Double_Window *processingWindow;
private:
  inline void cb_processingWindow_i(Fl_Double_Window*, void*);
  static void cb_processingWindow(Fl_Double_Window*, void*);
public:
  Fl_Group *specBox;
  Fl_Chart *inputSpectraL;
  Fl_Chart *outputSpectra0;
  Fl_Chart *inputSpectraR;
  Fl_Chart *outputSpectra1;
  Fl_Chart *outputSpectra2;
  Fl_Chart *outputSpectra3;
  Fl_Chart *outputSpectra4;
  Fl_Chart *outputSpectra5;
  Fl_Chart *outputSpectra6;
  Fl_Chart *outputSpectra7;
  Fl_Window *infoWindow;
  Fl_Text_Display *infoText;
  Fl_Button *okButton;
private:
  inline void cb_okButton_i(Fl_Button*, void*);
  static void cb_okButton(Fl_Button*, void*);
public:
  Fl_Double_Window *filtersWindow;
  Fl_Button *okFiltButton;
private:
  inline void cb_okFiltButton_i(Fl_Button*, void*);
  static void cb_okFiltButton(Fl_Button*, void*);
public:
  Fl_Button *leftOpen;
private:
  inline void cb_leftOpen_i(Fl_Button*, void*);
  static void cb_leftOpen(Fl_Button*, void*);
public:
  Fl_Button *middleLeftOpen;
private:
  inline void cb_middleLeftOpen_i(Fl_Button*, void*);
  static void cb_middleLeftOpen(Fl_Button*, void*);
public:
  Fl_Button *rightOpen;
private:
  inline void cb_rightOpen_i(Fl_Button*, void*);
  static void cb_rightOpen(Fl_Button*, void*);
public:
  Fl_Button *rearLeftOpen;
private:
  inline void cb_rearLeftOpen_i(Fl_Button*, void*);
  static void cb_rearLeftOpen(Fl_Button*, void*);
public:
  Fl_Button *rearRightOpen;
private:
  inline void cb_rearRightOpen_i(Fl_Button*, void*);
  static void cb_rearRightOpen(Fl_Button*, void*);
public:
  Fl_Button *middleRightOpen;
private:
  inline void cb_middleRightOpen_i(Fl_Button*, void*);
  static void cb_middleRightOpen(Fl_Button*, void*);
public:
  Fl_Button *centerOpen;
private:
  inline void cb_centerOpen_i(Fl_Button*, void*);
  static void cb_centerOpen(Fl_Button*, void*);
public:
  Fl_Button *subwooferOpen;
private:
  inline void cb_subwooferOpen_i(Fl_Button*, void*);
  static void cb_subwooferOpen(Fl_Button*, void*);
public:
  Fl_Box *filtLabel;
  Fl_Double_Window *filtConfigWindow;
  Fl_Choice *inputChan;
  Fl_Choice *filterChoice;
  Fl_Slider *cutOff;
private:
  inline void cb_cutOff_i(Fl_Slider*, void*);
  static void cb_cutOff(Fl_Slider*, void*);
public:
  Fl_Button *okFiltConfigButton;
private:
  inline void cb_okFiltConfigButton_i(Fl_Button*, void*);
  static void cb_okFiltConfigButton(Fl_Button*, void*);
public:
  Fl_Box *data;
  Fl_Slider *bandWidth;
private:
  inline void cb_bandWidth_i(Fl_Slider*, void*);
  static void cb_bandWidth(Fl_Slider*, void*);
public:
  Fl_Chart *respChart;
  Fl_Chart *phaseChart;
  ~TestPlayerGui();
  void show();
  bool isPlaying; 
  bool isStopped; 
  char filename[256]; 
  Fl_File_Chooser *fc; 
  double ffStep; 
  SNDFILE *fin; 
  SF_INFO input_info; 
  short libToUse; 
  unsigned long length; 
  char currDir[1024]; 
  int inputData[2][1152]; 
  boolean inputBusyFlag; 
  int **outputData; 
  boolean outputBusyFlag; 
  boolean continueDecoding; 
};
#endif
